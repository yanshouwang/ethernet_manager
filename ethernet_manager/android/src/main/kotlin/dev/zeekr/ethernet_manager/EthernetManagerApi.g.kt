// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package dev.zeekr.ethernet_manager

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object EthernetManagerApiPigeonUtils {

  fun createConnectionError(channelName: String): EthernetManagerError {
    return EthernetManagerError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")  }

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is EthernetManagerError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class EthernetManagerError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()
/**
 * Maintains instances used to communicate with the corresponding objects in Dart.
 *
 * Objects stored in this container are represented by an object in Dart that is also stored in
 * an InstanceManager with the same identifier.
 *
 * When an instance is added with an identifier, either can be used to retrieve the other.
 *
 * Added instances are added as a weak reference and a strong reference. When the strong
 * reference is removed with [remove] and the weak reference is deallocated, the
 * `finalizationListener.onFinalize` is called with the instance's identifier. However, if the strong
 * reference is removed and then the identifier is retrieved with the intention to pass the identifier
 * to Dart (e.g. calling [getIdentifierForStrongReference]), the strong reference to the instance
 * is recreated. The strong reference will then need to be removed manually again.
 */
@Suppress("UNCHECKED_CAST", "MemberVisibilityCanBePrivate")
class EthernetManagerApiPigeonInstanceManager(private val finalizationListener: PigeonFinalizationListener) {
  /** Interface for listening when a weak reference of an instance is removed from the manager.  */
  interface PigeonFinalizationListener {
    fun onFinalize(identifier: Long)
  }

  private val identifiers = java.util.WeakHashMap<Any, Long>()
  private val weakInstances = HashMap<Long, java.lang.ref.WeakReference<Any>>()
  private val strongInstances = HashMap<Long, Any>()
  private val referenceQueue = java.lang.ref.ReferenceQueue<Any>()
  private val weakReferencesToIdentifiers = HashMap<java.lang.ref.WeakReference<Any>, Long>()
  private val handler = android.os.Handler(android.os.Looper.getMainLooper())
  private val releaseAllFinalizedInstancesRunnable = Runnable {
    this.releaseAllFinalizedInstances()
  }
  private var nextIdentifier: Long = minHostCreatedIdentifier
  private var hasFinalizationListenerStopped = false

  /**
   * Modifies the time interval used to define how often this instance removes garbage collected
   * weak references to native Android objects that this instance was managing.
   */
  var clearFinalizedWeakReferencesInterval: Long = 3000
    set(value) {
      handler.removeCallbacks(releaseAllFinalizedInstancesRunnable)
      field = value
      releaseAllFinalizedInstances()
    }

  init {
    handler.postDelayed(releaseAllFinalizedInstancesRunnable, clearFinalizedWeakReferencesInterval)
  }

  companion object {
    // Identifiers are locked to a specific range to avoid collisions with objects
    // created simultaneously from Dart.
    // Host uses identifiers >= 2^16 and Dart is expected to use values n where,
    // 0 <= n < 2^16.
    private const val minHostCreatedIdentifier: Long = 65536
    private const val tag = "PigeonInstanceManager"

    /**
     * Instantiate a new manager with a listener for garbage collected weak
     * references.
     *
     * When the manager is no longer needed, [stopFinalizationListener] must be called.
     */
    fun create(finalizationListener: PigeonFinalizationListener): EthernetManagerApiPigeonInstanceManager {
      return EthernetManagerApiPigeonInstanceManager(finalizationListener)
    }
  }

  /**
   * Removes `identifier` and return its associated strongly referenced instance, if present,
   * from the manager.
   */
  fun <T> remove(identifier: Long): T? {
    logWarningIfFinalizationListenerHasStopped()
    return strongInstances.remove(identifier) as T?
  }

  /**
   * Retrieves the identifier paired with an instance, if present, otherwise `null`.
   *
   *
   * If the manager contains a strong reference to `instance`, it will return the identifier
   * associated with `instance`. If the manager contains only a weak reference to `instance`, a new
   * strong reference to `instance` will be added and will need to be removed again with [remove].
   *
   *
   * If this method returns a nonnull identifier, this method also expects the Dart
   * `EthernetManagerApiPigeonInstanceManager` to have, or recreate, a weak reference to the Dart instance the
   * identifier is associated with.
   */
  fun getIdentifierForStrongReference(instance: Any?): Long? {
    logWarningIfFinalizationListenerHasStopped()
    val identifier = identifiers[instance]
    if (identifier != null) {
      strongInstances[identifier] = instance!!
    }
    return identifier
  }

  /**
   * Adds a new instance that was instantiated from Dart.
   *
   * The same instance can be added multiple times, but each identifier must be unique. This
   * allows two objects that are equivalent (e.g. the `equals` method returns true and their
   * hashcodes are equal) to both be added.
   *
   * [identifier] must be >= 0 and unique.
   */
  fun addDartCreatedInstance(instance: Any, identifier: Long) {
    logWarningIfFinalizationListenerHasStopped()
    addInstance(instance, identifier)
  }

  /**
   * Adds a new unique instance that was instantiated from the host platform.
   *
   * If the manager contains [instance], this returns the corresponding identifier. If the
   * manager does not contain [instance], this adds the instance and returns a unique
   * identifier for that [instance].
   */
  fun addHostCreatedInstance(instance: Any): Long {
    logWarningIfFinalizationListenerHasStopped()
    require(!containsInstance(instance)) { "Instance of ${instance.javaClass} has already been added." }
    val identifier = nextIdentifier++
    addInstance(instance, identifier)
    return identifier
  }

  /** Retrieves the instance associated with identifier, if present, otherwise `null`. */
  fun <T> getInstance(identifier: Long): T? {
    logWarningIfFinalizationListenerHasStopped()
    val instance = weakInstances[identifier] as java.lang.ref.WeakReference<T>?
    return instance?.get()
  }

  /** Returns whether this manager contains the given `instance`. */
  fun containsInstance(instance: Any?): Boolean {
    logWarningIfFinalizationListenerHasStopped()
    return identifiers.containsKey(instance)
  }

  /**
   * Stops the periodic run of the [PigeonFinalizationListener] for instances that have been garbage
   * collected.
   *
   * The InstanceManager can continue to be used, but the [PigeonFinalizationListener] will no
   * longer be called and methods will log a warning.
   */
  fun stopFinalizationListener() {
    handler.removeCallbacks(releaseAllFinalizedInstancesRunnable)
    hasFinalizationListenerStopped = true
  }

  /**
   * Removes all of the instances from this manager.
   *
   * The manager will be empty after this call returns.
   */
  fun clear() {
    identifiers.clear()
    weakInstances.clear()
    strongInstances.clear()
    weakReferencesToIdentifiers.clear()
  }

  /**
   * Whether the [PigeonFinalizationListener] is still being called for instances that are garbage
   * collected.
   *
   * See [stopFinalizationListener].
   */
  fun hasFinalizationListenerStopped(): Boolean {
    return hasFinalizationListenerStopped
  }

  private fun releaseAllFinalizedInstances() {
    if (hasFinalizationListenerStopped()) {
      return
    }
    var reference: java.lang.ref.WeakReference<Any>?
    while ((referenceQueue.poll() as java.lang.ref.WeakReference<Any>?).also { reference = it } != null) {
      val identifier = weakReferencesToIdentifiers.remove(reference)
      if (identifier != null) {
        weakInstances.remove(identifier)
        strongInstances.remove(identifier)
        finalizationListener.onFinalize(identifier)
      }
    }
    handler.postDelayed(releaseAllFinalizedInstancesRunnable, clearFinalizedWeakReferencesInterval)
  }

  private fun addInstance(instance: Any, identifier: Long) {
    require(identifier >= 0) { "Identifier must be >= 0: $identifier" }
    require(!weakInstances.containsKey(identifier)) {
      "Identifier has already been added: $identifier"
    }
    val weakReference = java.lang.ref.WeakReference(instance, referenceQueue)
    identifiers[instance] = identifier
    weakInstances[identifier] = weakReference
    weakReferencesToIdentifiers[weakReference] = identifier
    strongInstances[identifier] = instance
  }

  private fun logWarningIfFinalizationListenerHasStopped() {
    if (hasFinalizationListenerStopped()) {
      Log.w(
        tag,
        "The manager was used after calls to the PigeonFinalizationListener has been stopped."
      )
    }
  }
}


/** Generated API for managing the Dart and native `InstanceManager`s. */
private class EthernetManagerApiPigeonInstanceManagerApi(val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by EthernetManagerApiPigeonInstanceManagerApi. */
    val codec: MessageCodec<Any?> by lazy {
      EthernetManagerApiPigeonCodec()
    }

    /**
     * Sets up an instance of `EthernetManagerApiPigeonInstanceManagerApi` to handle messages from the
     * `binaryMessenger`.
     */
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, instanceManager: EthernetManagerApiPigeonInstanceManager?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.PigeonInternalInstanceManager.removeStrongReference", codec)
        if (instanceManager != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              instanceManager.remove<Any?>(identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.PigeonInternalInstanceManager.clear", codec)
        if (instanceManager != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              instanceManager.clear()
              listOf(null)
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  fun removeStrongReference(identifierArg: Long, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.ethernet_manager.PigeonInternalInstanceManager.removeStrongReference"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(EthernetManagerError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(EthernetManagerApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
}
/**
 * Provides implementations for each ProxyApi implementation and provides access to resources
 * needed by any implementation.
 */
abstract class EthernetManagerApiPigeonProxyApiRegistrar(val binaryMessenger: BinaryMessenger) {
  /** Whether APIs should ignore calling to Dart. */
  public var ignoreCallsToDart = false
  val instanceManager: EthernetManagerApiPigeonInstanceManager
  private var _codec: MessageCodec<Any?>? = null
  val codec: MessageCodec<Any?>
    get() {
      if (_codec == null) {
        _codec = EthernetManagerApiPigeonProxyApiBaseCodec(this)
      }
      return _codec!!
    }

  init {
    val api = EthernetManagerApiPigeonInstanceManagerApi(binaryMessenger)
    instanceManager = EthernetManagerApiPigeonInstanceManager.create(
      object : EthernetManagerApiPigeonInstanceManager.PigeonFinalizationListener {
        override fun onFinalize(identifier: Long) {
          api.removeStrongReference(identifier) {
            if (it.isFailure) {
              Log.e(
                "PigeonProxyApiRegistrar",
                "Failed to remove Dart strong reference with identifier: $identifier"
              )
            }
          }
        }
      }
    )
  }
  /**
   * An implementation of [PigeonApiEthernetManagerProxyApi] used to add a new Dart instance of
   * `EthernetManagerProxyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiEthernetManagerProxyApi(): PigeonApiEthernetManagerProxyApi

  /**
   * An implementation of [PigeonApiIpConfigurationProxyApi] used to add a new Dart instance of
   * `IpConfigurationProxyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiIpConfigurationProxyApi(): PigeonApiIpConfigurationProxyApi

  /**
   * An implementation of [PigeonApiStaticIpConfigurationProxyApi] used to add a new Dart instance of
   * `StaticIpConfigurationProxyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiStaticIpConfigurationProxyApi(): PigeonApiStaticIpConfigurationProxyApi

  /**
   * An implementation of [PigeonApiLinkAddressProxyApi] used to add a new Dart instance of
   * `LinkAddressProxyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiLinkAddressProxyApi(): PigeonApiLinkAddressProxyApi

  /**
   * An implementation of [PigeonApiInetAddressProxyApi] used to add a new Dart instance of
   * `InetAddressProxyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiInetAddressProxyApi(): PigeonApiInetAddressProxyApi

  /**
   * An implementation of [PigeonApiNetworkInterfaceProxyApi] used to add a new Dart instance of
   * `NetworkInterfaceProxyApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiNetworkInterfaceProxyApi(): PigeonApiNetworkInterfaceProxyApi
  {
    return PigeonApiNetworkInterfaceProxyApi(this)
  }

  /**
   * An implementation of [PigeonApiRouteInfoProxyApi] used to add a new Dart instance of
   * `RouteInfoProxyApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiRouteInfoProxyApi(): PigeonApiRouteInfoProxyApi
  {
    return PigeonApiRouteInfoProxyApi(this)
  }

  /**
   * An implementation of [PigeonApiLinkPropertiesProxyApi] used to add a new Dart instance of
   * `LinkPropertiesProxyApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiLinkPropertiesProxyApi(): PigeonApiLinkPropertiesProxyApi
  {
    return PigeonApiLinkPropertiesProxyApi(this)
  }

  /**
   * An implementation of [PigeonApiEthernetManagerListenerProxyApi] used to add a new Dart instance of
   * `EthernetManagerListenerProxyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiEthernetManagerListenerProxyApi(): PigeonApiEthernetManagerListenerProxyApi

  fun setUp() {
    EthernetManagerApiPigeonInstanceManagerApi.setUpMessageHandlers(binaryMessenger, instanceManager)
    PigeonApiEthernetManagerProxyApi.setUpMessageHandlers(binaryMessenger, getPigeonApiEthernetManagerProxyApi())
    PigeonApiIpConfigurationProxyApi.setUpMessageHandlers(binaryMessenger, getPigeonApiIpConfigurationProxyApi())
    PigeonApiStaticIpConfigurationProxyApi.setUpMessageHandlers(binaryMessenger, getPigeonApiStaticIpConfigurationProxyApi())
    PigeonApiLinkAddressProxyApi.setUpMessageHandlers(binaryMessenger, getPigeonApiLinkAddressProxyApi())
    PigeonApiInetAddressProxyApi.setUpMessageHandlers(binaryMessenger, getPigeonApiInetAddressProxyApi())
    PigeonApiEthernetManagerListenerProxyApi.setUpMessageHandlers(binaryMessenger, getPigeonApiEthernetManagerListenerProxyApi())
  }
  fun tearDown() {
    EthernetManagerApiPigeonInstanceManagerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiEthernetManagerProxyApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiIpConfigurationProxyApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiStaticIpConfigurationProxyApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiLinkAddressProxyApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiInetAddressProxyApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiEthernetManagerListenerProxyApi.setUpMessageHandlers(binaryMessenger, null)
  }
}
private class EthernetManagerApiPigeonProxyApiBaseCodec(val registrar: EthernetManagerApiPigeonProxyApiRegistrar) : EthernetManagerApiPigeonCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        val identifier: Long = readValue(buffer) as Long
        val instance: Any? = registrar.instanceManager.getInstance(identifier)
        if (instance == null) {
          Log.e(
            "PigeonProxyApiBaseCodec",
            "Failed to find instance with identifier: $identifier"
          )
        }
        return instance
      }
      else -> super.readValueOfType(type, buffer)
    }
  }

  override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
    if (value is Boolean || value is ByteArray || value is Double || value is DoubleArray || value is FloatArray || value is Int || value is IntArray || value is List<*> || value is Long || value is LongArray || value is Map<*, *> || value is String || value is IpAssignmentApi || value == null) {
      super.writeValue(stream, value)
      return
    }

    if (value is dev.zeekr.ethernet_manager.EthernetManager) {
      registrar.getPigeonApiEthernetManagerProxyApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.zeekr.ethernet_manager.IpConfiguration) {
      registrar.getPigeonApiIpConfigurationProxyApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.zeekr.ethernet_manager.StaticIpConfiguration) {
      registrar.getPigeonApiStaticIpConfigurationProxyApi().pigeon_newInstance(value) { }
    }
     else if (value is android.net.LinkAddress) {
      registrar.getPigeonApiLinkAddressProxyApi().pigeon_newInstance(value) { }
    }
     else if (value is java.net.InetAddress) {
      registrar.getPigeonApiInetAddressProxyApi().pigeon_newInstance(value) { }
    }
     else if (value is java.net.NetworkInterface) {
      registrar.getPigeonApiNetworkInterfaceProxyApi().pigeon_newInstance(value) { }
    }
     else if (value is android.net.RouteInfo) {
      registrar.getPigeonApiRouteInfoProxyApi().pigeon_newInstance(value) { }
    }
     else if (value is android.net.LinkProperties) {
      registrar.getPigeonApiLinkPropertiesProxyApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.zeekr.ethernet_manager.EthernetManager.Listener) {
      registrar.getPigeonApiEthernetManagerListenerProxyApi().pigeon_newInstance(value) { }
    }

    when {
      registrar.instanceManager.containsInstance(value) -> {
        stream.write(128)
        writeValue(stream, registrar.instanceManager.getIdentifierForStrongReference(value))
      }
      else -> throw IllegalArgumentException("Unsupported value: '$value' of type '${value.javaClass.name}'")
    }
  }
}

enum class IpAssignmentApi(val raw: Int) {
  STATIC(0),
  DHCP(1),
  UNASSIGNED(2);

  companion object {
    fun ofRaw(raw: Int): IpAssignmentApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}
private open class EthernetManagerApiPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          IpAssignmentApi.ofRaw(it.toInt())
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is IpAssignmentApi -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      else -> super.writeValue(stream, value)
    }
  }
}

@Suppress("UNCHECKED_CAST")
abstract class PigeonApiEthernetManagerProxyApi(open val pigeonRegistrar: EthernetManagerApiPigeonProxyApiRegistrar) {
  abstract fun instance(): dev.zeekr.ethernet_manager.EthernetManager

  abstract fun getConfiguration(pigeon_instance: dev.zeekr.ethernet_manager.EthernetManager, iface: String): dev.zeekr.ethernet_manager.IpConfiguration

  abstract fun setConfiguration(pigeon_instance: dev.zeekr.ethernet_manager.EthernetManager, iface: String, config: dev.zeekr.ethernet_manager.IpConfiguration)

  abstract fun isAvailable(pigeon_instance: dev.zeekr.ethernet_manager.EthernetManager, iface: String?): Boolean

  abstract fun getAvailableInterfaces(pigeon_instance: dev.zeekr.ethernet_manager.EthernetManager): List<String>

  abstract fun addListener(pigeon_instance: dev.zeekr.ethernet_manager.EthernetManager, listener: dev.zeekr.ethernet_manager.EthernetManager.Listener)

  abstract fun removeListener(pigeon_instance: dev.zeekr.ethernet_manager.EthernetManager, listener: dev.zeekr.ethernet_manager.EthernetManager.Listener)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiEthernetManagerProxyApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: EthernetManagerApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.EthernetManagerProxyApi.instance", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.instance(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.EthernetManagerProxyApi.getConfiguration", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.zeekr.ethernet_manager.EthernetManager
            val ifaceArg = args[1] as String
            val wrapped: List<Any?> = try {
              listOf(api.getConfiguration(pigeon_instanceArg, ifaceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.EthernetManagerProxyApi.setConfiguration", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.zeekr.ethernet_manager.EthernetManager
            val ifaceArg = args[1] as String
            val configArg = args[2] as dev.zeekr.ethernet_manager.IpConfiguration
            val wrapped: List<Any?> = try {
              api.setConfiguration(pigeon_instanceArg, ifaceArg, configArg)
              listOf(null)
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.EthernetManagerProxyApi.isAvailable", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.zeekr.ethernet_manager.EthernetManager
            val ifaceArg = args[1] as String?
            val wrapped: List<Any?> = try {
              listOf(api.isAvailable(pigeon_instanceArg, ifaceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.EthernetManagerProxyApi.getAvailableInterfaces", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.zeekr.ethernet_manager.EthernetManager
            val wrapped: List<Any?> = try {
              listOf(api.getAvailableInterfaces(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.EthernetManagerProxyApi.addListener", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.zeekr.ethernet_manager.EthernetManager
            val listenerArg = args[1] as dev.zeekr.ethernet_manager.EthernetManager.Listener
            val wrapped: List<Any?> = try {
              api.addListener(pigeon_instanceArg, listenerArg)
              listOf(null)
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.EthernetManagerProxyApi.removeListener", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.zeekr.ethernet_manager.EthernetManager
            val listenerArg = args[1] as dev.zeekr.ethernet_manager.EthernetManager.Listener
            val wrapped: List<Any?> = try {
              api.removeListener(pigeon_instanceArg, listenerArg)
              listOf(null)
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of EthernetManagerProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.zeekr.ethernet_manager.EthernetManager, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              EthernetManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.ethernet_manager.EthernetManagerProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(EthernetManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(EthernetManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiIpConfigurationProxyApi(open val pigeonRegistrar: EthernetManagerApiPigeonProxyApiRegistrar) {
  abstract fun getIpAssignment(pigeon_instance: dev.zeekr.ethernet_manager.IpConfiguration): IpAssignmentApi

  abstract fun setIpAssignment(pigeon_instance: dev.zeekr.ethernet_manager.IpConfiguration, ipAssignment: IpAssignmentApi)

  abstract fun getStaticIpConfiguration(pigeon_instance: dev.zeekr.ethernet_manager.IpConfiguration): dev.zeekr.ethernet_manager.StaticIpConfiguration?

  abstract fun setStaticIpConfiguration(pigeon_instance: dev.zeekr.ethernet_manager.IpConfiguration, staticIpConfiguration: dev.zeekr.ethernet_manager.StaticIpConfiguration?)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiIpConfigurationProxyApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: EthernetManagerApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.IpConfigurationProxyApi.getIpAssignment", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.zeekr.ethernet_manager.IpConfiguration
            val wrapped: List<Any?> = try {
              listOf(api.getIpAssignment(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.IpConfigurationProxyApi.setIpAssignment", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.zeekr.ethernet_manager.IpConfiguration
            val ipAssignmentArg = args[1] as IpAssignmentApi
            val wrapped: List<Any?> = try {
              api.setIpAssignment(pigeon_instanceArg, ipAssignmentArg)
              listOf(null)
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.IpConfigurationProxyApi.getStaticIpConfiguration", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.zeekr.ethernet_manager.IpConfiguration
            val wrapped: List<Any?> = try {
              listOf(api.getStaticIpConfiguration(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.IpConfigurationProxyApi.setStaticIpConfiguration", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.zeekr.ethernet_manager.IpConfiguration
            val staticIpConfigurationArg = args[1] as dev.zeekr.ethernet_manager.StaticIpConfiguration?
            val wrapped: List<Any?> = try {
              api.setStaticIpConfiguration(pigeon_instanceArg, staticIpConfigurationArg)
              listOf(null)
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of IpConfigurationProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.zeekr.ethernet_manager.IpConfiguration, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              EthernetManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.ethernet_manager.IpConfigurationProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(EthernetManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(EthernetManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiStaticIpConfigurationProxyApi(open val pigeonRegistrar: EthernetManagerApiPigeonProxyApiRegistrar) {
  abstract fun clear(pigeon_instance: dev.zeekr.ethernet_manager.StaticIpConfiguration)

  abstract fun getIpAddress(pigeon_instance: dev.zeekr.ethernet_manager.StaticIpConfiguration): android.net.LinkAddress

  abstract fun getGateway(pigeon_instance: dev.zeekr.ethernet_manager.StaticIpConfiguration): java.net.InetAddress?

  abstract fun getDnsServers(pigeon_instance: dev.zeekr.ethernet_manager.StaticIpConfiguration): List<java.net.InetAddress>

  abstract fun getDomains(pigeon_instance: dev.zeekr.ethernet_manager.StaticIpConfiguration): String?

  abstract fun addDnsServer(pigeon_instance: dev.zeekr.ethernet_manager.StaticIpConfiguration, server: java.net.InetAddress)

  abstract fun getRoutes(pigeon_instance: dev.zeekr.ethernet_manager.StaticIpConfiguration, iface: String?): List<android.net.RouteInfo>

  abstract fun toLinkProperties(pigeon_instance: dev.zeekr.ethernet_manager.StaticIpConfiguration, iface: String?): android.net.LinkProperties

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiStaticIpConfigurationProxyApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: EthernetManagerApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.StaticIpConfigurationProxyApi.clear", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.zeekr.ethernet_manager.StaticIpConfiguration
            val wrapped: List<Any?> = try {
              api.clear(pigeon_instanceArg)
              listOf(null)
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.StaticIpConfigurationProxyApi.getIpAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.zeekr.ethernet_manager.StaticIpConfiguration
            val wrapped: List<Any?> = try {
              listOf(api.getIpAddress(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.StaticIpConfigurationProxyApi.getGateway", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.zeekr.ethernet_manager.StaticIpConfiguration
            val wrapped: List<Any?> = try {
              listOf(api.getGateway(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.StaticIpConfigurationProxyApi.getDnsServers", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.zeekr.ethernet_manager.StaticIpConfiguration
            val wrapped: List<Any?> = try {
              listOf(api.getDnsServers(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.StaticIpConfigurationProxyApi.getDomains", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.zeekr.ethernet_manager.StaticIpConfiguration
            val wrapped: List<Any?> = try {
              listOf(api.getDomains(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.StaticIpConfigurationProxyApi.addDnsServer", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.zeekr.ethernet_manager.StaticIpConfiguration
            val serverArg = args[1] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              api.addDnsServer(pigeon_instanceArg, serverArg)
              listOf(null)
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.StaticIpConfigurationProxyApi.getRoutes", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.zeekr.ethernet_manager.StaticIpConfiguration
            val ifaceArg = args[1] as String?
            val wrapped: List<Any?> = try {
              listOf(api.getRoutes(pigeon_instanceArg, ifaceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.StaticIpConfigurationProxyApi.toLinkProperties", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.zeekr.ethernet_manager.StaticIpConfiguration
            val ifaceArg = args[1] as String?
            val wrapped: List<Any?> = try {
              listOf(api.toLinkProperties(pigeon_instanceArg, ifaceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of StaticIpConfigurationProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.zeekr.ethernet_manager.StaticIpConfiguration, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              EthernetManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.ethernet_manager.StaticIpConfigurationProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(EthernetManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(EthernetManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiLinkAddressProxyApi(open val pigeonRegistrar: EthernetManagerApiPigeonProxyApiRegistrar) {
  abstract fun isIpv6(pigeon_instance: android.net.LinkAddress): Boolean

  abstract fun isIpv4(pigeon_instance: android.net.LinkAddress): Boolean

  abstract fun isSameAddressAs(pigeon_instance: android.net.LinkAddress, other: android.net.LinkAddress?): Boolean

  abstract fun getAddress(pigeon_instance: android.net.LinkAddress): java.net.InetAddress

  abstract fun getPrefixLength(pigeon_instance: android.net.LinkAddress): Long

  abstract fun getFlags(pigeon_instance: android.net.LinkAddress): Long

  abstract fun getScope(pigeon_instance: android.net.LinkAddress): Long

  abstract fun getDeprecationTime(pigeon_instance: android.net.LinkAddress): Long

  abstract fun getExpirationTime(pigeon_instance: android.net.LinkAddress): Long

  abstract fun isGlobalPreferred(pigeon_instance: android.net.LinkAddress): Boolean

  abstract fun isPreferred(pigeon_instance: android.net.LinkAddress): Boolean

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiLinkAddressProxyApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: EthernetManagerApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.LinkAddressProxyApi.isIpv6", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkAddress
            val wrapped: List<Any?> = try {
              listOf(api.isIpv6(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.LinkAddressProxyApi.isIpv4", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkAddress
            val wrapped: List<Any?> = try {
              listOf(api.isIpv4(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.LinkAddressProxyApi.isSameAddressAs", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkAddress
            val otherArg = args[1] as android.net.LinkAddress?
            val wrapped: List<Any?> = try {
              listOf(api.isSameAddressAs(pigeon_instanceArg, otherArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.LinkAddressProxyApi.getAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkAddress
            val wrapped: List<Any?> = try {
              listOf(api.getAddress(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.LinkAddressProxyApi.getPrefixLength", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkAddress
            val wrapped: List<Any?> = try {
              listOf(api.getPrefixLength(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.LinkAddressProxyApi.getFlags", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkAddress
            val wrapped: List<Any?> = try {
              listOf(api.getFlags(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.LinkAddressProxyApi.getScope", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkAddress
            val wrapped: List<Any?> = try {
              listOf(api.getScope(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.LinkAddressProxyApi.getDeprecationTime", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkAddress
            val wrapped: List<Any?> = try {
              listOf(api.getDeprecationTime(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.LinkAddressProxyApi.getExpirationTime", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkAddress
            val wrapped: List<Any?> = try {
              listOf(api.getExpirationTime(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.LinkAddressProxyApi.isGlobalPreferred", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkAddress
            val wrapped: List<Any?> = try {
              listOf(api.isGlobalPreferred(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.LinkAddressProxyApi.isPreferred", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkAddress
            val wrapped: List<Any?> = try {
              listOf(api.isPreferred(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of LinkAddressProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.net.LinkAddress, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              EthernetManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.ethernet_manager.LinkAddressProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(EthernetManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(EthernetManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiInetAddressProxyApi(open val pigeonRegistrar: EthernetManagerApiPigeonProxyApiRegistrar) {
  abstract fun isMulticastAddress(pigeon_instance: java.net.InetAddress): Boolean

  abstract fun isAnyLocalAddress(pigeon_instance: java.net.InetAddress): Boolean

  abstract fun isLoopbackAddress(pigeon_instance: java.net.InetAddress): Boolean

  abstract fun isLinkLocalAddress(pigeon_instance: java.net.InetAddress): Boolean

  abstract fun isSiteLocalAddress(pigeon_instance: java.net.InetAddress): Boolean

  abstract fun isMCGlobal(pigeon_instance: java.net.InetAddress): Boolean

  abstract fun isMCNodeLocal(pigeon_instance: java.net.InetAddress): Boolean

  abstract fun isMCLinkLocal(pigeon_instance: java.net.InetAddress): Boolean

  abstract fun isMCSiteLocal(pigeon_instance: java.net.InetAddress): Boolean

  abstract fun isMCOrgLocal(pigeon_instance: java.net.InetAddress): Boolean

  abstract fun isReachable(pigeon_instance: java.net.InetAddress, netif: java.net.NetworkInterface?, ttl: Long?, timeout: Long): Boolean

  abstract fun getHostName(pigeon_instance: java.net.InetAddress): String

  abstract fun getCanonicalHostName(pigeon_instance: java.net.InetAddress): String

  abstract fun getAddress(pigeon_instance: java.net.InetAddress): ByteArray

  abstract fun getHostAddress(pigeon_instance: java.net.InetAddress): String?

  abstract fun getByAddress(host: String?, addr: ByteArray): java.net.InetAddress

  abstract fun getByName(host: String): java.net.InetAddress

  abstract fun getAllByName(host: String): List<java.net.InetAddress>

  abstract fun getLoopbackAddress(): java.net.InetAddress

  abstract fun getLocalHost(): java.net.InetAddress

  abstract fun clearDnsCache()

  abstract fun getByNameOnNet(host: String, netId: Long): java.net.InetAddress

  abstract fun getAllByNameOnNet(host: String, netId: Long): List<java.net.InetAddress>

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiInetAddressProxyApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: EthernetManagerApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.isMulticastAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.isMulticastAddress(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.isAnyLocalAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.isAnyLocalAddress(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.isLoopbackAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.isLoopbackAddress(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.isLinkLocalAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.isLinkLocalAddress(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.isSiteLocalAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.isSiteLocalAddress(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.isMCGlobal", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.isMCGlobal(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.isMCNodeLocal", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.isMCNodeLocal(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.isMCLinkLocal", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.isMCLinkLocal(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.isMCSiteLocal", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.isMCSiteLocal(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.isMCOrgLocal", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.isMCOrgLocal(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.isReachable", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val netifArg = args[1] as java.net.NetworkInterface?
            val ttlArg = args[2] as Long?
            val timeoutArg = args[3] as Long
            val wrapped: List<Any?> = try {
              listOf(api.isReachable(pigeon_instanceArg, netifArg, ttlArg, timeoutArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.getHostName", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.getHostName(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.getCanonicalHostName", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.getCanonicalHostName(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.getAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.getAddress(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.getHostAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.getHostAddress(pigeon_instanceArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.getByAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hostArg = args[0] as String?
            val addrArg = args[1] as ByteArray
            val wrapped: List<Any?> = try {
              listOf(api.getByAddress(hostArg, addrArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.getByName", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hostArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.getByName(hostArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.getAllByName", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hostArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.getAllByName(hostArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.getLoopbackAddress", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getLoopbackAddress())
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.getLocalHost", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getLocalHost())
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.clearDnsCache", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.clearDnsCache()
              listOf(null)
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.getByNameOnNet", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hostArg = args[0] as String
            val netIdArg = args[1] as Long
            val wrapped: List<Any?> = try {
              listOf(api.getByNameOnNet(hostArg, netIdArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.getAllByNameOnNet", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hostArg = args[0] as String
            val netIdArg = args[1] as Long
            val wrapped: List<Any?> = try {
              listOf(api.getAllByNameOnNet(hostArg, netIdArg))
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of InetAddressProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: java.net.InetAddress, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              EthernetManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.ethernet_manager.InetAddressProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(EthernetManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(EthernetManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiNetworkInterfaceProxyApi(open val pigeonRegistrar: EthernetManagerApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of NetworkInterfaceProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: java.net.NetworkInterface, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              EthernetManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.ethernet_manager.NetworkInterfaceProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(EthernetManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(EthernetManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiRouteInfoProxyApi(open val pigeonRegistrar: EthernetManagerApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of RouteInfoProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.net.RouteInfo, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              EthernetManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.ethernet_manager.RouteInfoProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(EthernetManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(EthernetManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiLinkPropertiesProxyApi(open val pigeonRegistrar: EthernetManagerApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of LinkPropertiesProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.net.LinkProperties, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              EthernetManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.ethernet_manager.LinkPropertiesProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(EthernetManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(EthernetManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiEthernetManagerListenerProxyApi(open val pigeonRegistrar: EthernetManagerApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): dev.zeekr.ethernet_manager.EthernetManager.Listener

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiEthernetManagerListenerProxyApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: EthernetManagerApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ethernet_manager.EthernetManagerListenerProxyApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              EthernetManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of EthernetManagerListenerProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.zeekr.ethernet_manager.EthernetManager.Listener, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              EthernetManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      callback(
          Result.failure(
              EthernetManagerError("new-instance-error", "Attempting to create a new Dart instance of EthernetManagerListenerProxyApi, but the class has a nonnull callback method.", "")))
    }
  }

  fun onAvailabilityChanged(pigeon_instanceArg: dev.zeekr.ethernet_manager.EthernetManager.Listener, ifaceArg: String, isAvailableArg: Boolean, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              EthernetManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.ethernet_manager.EthernetManagerListenerProxyApi.onAvailabilityChanged"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, ifaceArg, isAvailableArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(EthernetManagerError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(EthernetManagerApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

}
